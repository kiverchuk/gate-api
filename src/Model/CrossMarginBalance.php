<?php
/**
 * CrossMarginBalance
 *
 * PHP version 7
 *
 * @category Class
 * @package  GateApi
 * @author   GateIO
 * @link     https://www.gate.io
 */

/**
 * Gate API v4
 *
 * Welcome to Gate.io API  APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 * Generated by: https://openapi-generator.tech
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace GateApi\Model;

use \ArrayAccess;
use \GateApi\ObjectSerializer;

/**
 * CrossMarginBalance Class Doc Comment
 *
 * @category Class
 * @package  GateApi
 * @author   GateIO
 * @link     https://www.gate.io
 */
class CrossMarginBalance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CrossMarginBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'available' => 'string',
        'freeze' => 'string',
        'borrowed' => 'string',
        'interest' => 'string',
        'negative_liab' => 'string',
        'futures_pos_liab' => 'string',
        'equity' => 'string',
        'total_freeze' => 'string',
        'total_liab' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'available' => null,
        'freeze' => null,
        'borrowed' => null,
        'interest' => null,
        'negative_liab' => null,
        'futures_pos_liab' => null,
        'equity' => null,
        'total_freeze' => null,
        'total_liab' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'available' => 'available',
        'freeze' => 'freeze',
        'borrowed' => 'borrowed',
        'interest' => 'interest',
        'negative_liab' => 'negative_liab',
        'futures_pos_liab' => 'futures_pos_liab',
        'equity' => 'equity',
        'total_freeze' => 'total_freeze',
        'total_liab' => 'total_liab'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'available' => 'setAvailable',
        'freeze' => 'setFreeze',
        'borrowed' => 'setBorrowed',
        'interest' => 'setInterest',
        'negative_liab' => 'setNegativeLiab',
        'futures_pos_liab' => 'setFuturesPosLiab',
        'equity' => 'setEquity',
        'total_freeze' => 'setTotalFreeze',
        'total_liab' => 'setTotalLiab'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'available' => 'getAvailable',
        'freeze' => 'getFreeze',
        'borrowed' => 'getBorrowed',
        'interest' => 'getInterest',
        'negative_liab' => 'getNegativeLiab',
        'futures_pos_liab' => 'getFuturesPosLiab',
        'equity' => 'getEquity',
        'total_freeze' => 'getTotalFreeze',
        'total_liab' => 'getTotalLiab'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['freeze'] = isset($data['freeze']) ? $data['freeze'] : null;
        $this->container['borrowed'] = isset($data['borrowed']) ? $data['borrowed'] : null;
        $this->container['interest'] = isset($data['interest']) ? $data['interest'] : null;
        $this->container['negative_liab'] = isset($data['negative_liab']) ? $data['negative_liab'] : null;
        $this->container['futures_pos_liab'] = isset($data['futures_pos_liab']) ? $data['futures_pos_liab'] : null;
        $this->container['equity'] = isset($data['equity']) ? $data['equity'] : null;
        $this->container['total_freeze'] = isset($data['total_freeze']) ? $data['total_freeze'] : null;
        $this->container['total_liab'] = isset($data['total_liab']) ? $data['total_liab'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets available
     *
     * @return string|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param string|null $available Available amount
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets freeze
     *
     * @return string|null
     */
    public function getFreeze()
    {
        return $this->container['freeze'];
    }

    /**
     * Sets freeze
     *
     * @param string|null $freeze Locked amount
     *
     * @return $this
     */
    public function setFreeze($freeze)
    {
        $this->container['freeze'] = $freeze;

        return $this;
    }

    /**
     * Gets borrowed
     *
     * @return string|null
     */
    public function getBorrowed()
    {
        return $this->container['borrowed'];
    }

    /**
     * Sets borrowed
     *
     * @param string|null $borrowed Borrowed amount
     *
     * @return $this
     */
    public function setBorrowed($borrowed)
    {
        $this->container['borrowed'] = $borrowed;

        return $this;
    }

    /**
     * Gets interest
     *
     * @return string|null
     */
    public function getInterest()
    {
        return $this->container['interest'];
    }

    /**
     * Sets interest
     *
     * @param string|null $interest Unpaid interests
     *
     * @return $this
     */
    public function setInterest($interest)
    {
        $this->container['interest'] = $interest;

        return $this;
    }

    /**
     * Gets negative_liab
     *
     * @return string|null
     */
    public function getNegativeLiab()
    {
        return $this->container['negative_liab'];
    }

    /**
     * Sets negative_liab
     *
     * @param string|null $negative_liab Negative Liabilities. Formula:Min[available+total+unrealized_pnl,0]
     *
     * @return $this
     */
    public function setNegativeLiab($negative_liab)
    {
        $this->container['negative_liab'] = $negative_liab;

        return $this;
    }

    /**
     * Gets futures_pos_liab
     *
     * @return string|null
     */
    public function getFuturesPosLiab()
    {
        return $this->container['futures_pos_liab'];
    }

    /**
     * Sets futures_pos_liab
     *
     * @param string|null $futures_pos_liab Borrowing to Open Positions in Futures
     *
     * @return $this
     */
    public function setFuturesPosLiab($futures_pos_liab)
    {
        $this->container['futures_pos_liab'] = $futures_pos_liab;

        return $this;
    }

    /**
     * Gets equity
     *
     * @return string|null
     */
    public function getEquity()
    {
        return $this->container['equity'];
    }

    /**
     * Sets equity
     *
     * @param string|null $equity Equity. Formula: available + freeze - borrowed + futures account's total + unrealized_pnl
     *
     * @return $this
     */
    public function setEquity($equity)
    {
        $this->container['equity'] = $equity;

        return $this;
    }

    /**
     * Gets total_freeze
     *
     * @return string|null
     */
    public function getTotalFreeze()
    {
        return $this->container['total_freeze'];
    }

    /**
     * Sets total_freeze
     *
     * @param string|null $total_freeze Total freeze. Formula: freeze + position_initial_margin + order_margin
     *
     * @return $this
     */
    public function setTotalFreeze($total_freeze)
    {
        $this->container['total_freeze'] = $total_freeze;

        return $this;
    }

    /**
     * Gets total_liab
     *
     * @return string|null
     */
    public function getTotalLiab()
    {
        return $this->container['total_liab'];
    }

    /**
     * Sets total_liab
     *
     * @param string|null $total_liab Total liabilities. Formula: Max[Abs[Min[quity - total_freeze,0], borrowed]] - futures_pos_liab
     *
     * @return $this
     */
    public function setTotalLiab($total_liab)
    {
        $this->container['total_liab'] = $total_liab;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


